syntax = "proto3";

package igloo;

import "google/protobuf/empty.proto";
import "arrow/flight/protocol/flight.proto"; // Import Flight protocol

option java_multiple_files = true;
option go_package = "github.com/igloo/igloo/api/proto;igloo";
option csharp_namespace = "Igloo.Api.Proto";

// Worker registration info
message WorkerInfo {
  string id = 1;
  string address = 2;
}

// Registration acknowledgement
message RegistrationAck {
  string message = 1;
}

// Heartbeat info
message HeartbeatInfo {
  string worker_id = 1;
  int64 timestamp = 2;
}

// Heartbeat response
message HeartbeatResponse {
  bool ok = 1;
}

// Task definition (serialized plan fragment)
message TaskDefinition {
  string task_id = 1;
  bytes payload = 2;
}

// Task result (serialized Arrow RecordBatch or similar)
message TaskResult {
  string task_id = 1;
  bytes result = 2;
}

// Data fetch request for shuffle
message DataForTaskRequest {
  string task_id = 1;
}

// Data fetch response
message DataForTaskResponse {
  bytes data = 1;
}

// Command message for SQL query
message CommandSql {
  string query = 1;
}

service CoordinatorService {
  rpc RegisterWorker(WorkerInfo) returns (RegistrationAck);
  rpc SendHeartbeat(HeartbeatInfo) returns (HeartbeatResponse);
}

service WorkerService {
  rpc ExecuteTask(TaskDefinition) returns (TaskResult);
  rpc GetDataForTask(DataForTaskRequest) returns (DataForTaskResponse);
}

// New service for client SQL queries using Arrow Flight
service IglooClientFlightService {
  // Get information about the flight (endpoints, ticket) for a given SQL query
  rpc GetFlightInfoSql(CommandSql) returns (arrow.flight.protocol.FlightInfo);

  // Retrieve a stream of Arrow RecordBatches using a ticket
  // This reuses the standard Arrow Flight DoGet method.
  // The ticket would be obtained from one of the FlightEndpoints in FlightInfo.
  rpc DoGet(arrow.flight.protocol.Ticket) returns (stream arrow.flight.protocol.FlightData);
}
