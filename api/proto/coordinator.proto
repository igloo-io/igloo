syntax = "proto3";

package igloo;

import "google/protobuf/empty.proto";
option java_multiple_files = true;
option go_package = "github.com/igloo/igloo/api/proto;igloo";
option csharp_namespace = "Igloo.Api.Proto";

// Worker registration info
message WorkerInfo {
  string id = 1;
  string address = 2;
}

// Registration acknowledgement
message RegistrationAck {
  string message = 1;
}

// Heartbeat info
message HeartbeatInfo {
  string worker_id = 1;
  int64 timestamp = 2;
}

// Heartbeat response
message HeartbeatResponse {
  bool ok = 1;
}

// Task definition (serialized plan fragment)
message TaskDefinition {
  string task_id = 1;
  bytes payload = 2;
}

// Task result (serialized Arrow RecordBatch or similar)
message TaskResult {
  string task_id = 1;
  bytes result = 2;
  bool success = 3; // Added for explicit success status
}

// Data fetch request for shuffle
message DataForTaskRequest {
  string task_id = 1;
}

// Data fetch response
message DataForTaskResponse {
  bytes data = 1;
}

// Request message for submitting a query
message QueryRequest {
  string query_id = 1;
  string sql = 2;
}

// Response message for a submitted query
message QueryResponse {
  string query_id = 1;
  string status = 2;
}

// Request message for getting query status
message QueryStatusRequest {
  string query_id = 1;
}

// Response message for query status
message QueryStatusResponse {
  string query_id = 1;
  string status = 2;
  string sql = 3;
  optional bytes physical_plan_bytes = 4;
  repeated TaskDefinition tasks = 5;
  optional int64 submitted_at = 6;
  optional int64 planned_at = 7;
  optional int64 distributed_plan_created_at = 8;
  optional int64 dispatched_at = 9;
  optional int64 finished_at = 10;
  map<string, string> task_statuses = 11;
}

service CoordinatorService {
  rpc RegisterWorker(WorkerInfo) returns (RegistrationAck);
  rpc SendHeartbeat(HeartbeatInfo) returns (HeartbeatResponse);
  rpc SubmitQuery(QueryRequest) returns (QueryResponse);
  rpc GetQueryStatus(QueryStatusRequest) returns (QueryStatusResponse);
}

service WorkerService {
  rpc ExecuteTask(TaskDefinition) returns (TaskResult);
  rpc GetDataForTask(DataForTaskRequest) returns (DataForTaskResponse);
}
