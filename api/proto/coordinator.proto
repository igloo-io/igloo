syntax = "proto3";

package igloo;

import "google/protobuf/empty.proto";
option java_multiple_files = true;
option go_package = "github.com/igloo/igloo/api/proto;igloo";
option csharp_namespace = "Igloo.Api.Proto";

// Worker registration info
message WorkerInfo {
  string id = 1;
  string address = 2;
}

// Registration acknowledgement
message RegistrationAck {
  string message = 1;
}

// Heartbeat info
message HeartbeatInfo {
  string worker_id = 1;
  int64 timestamp = 2;
}

// Heartbeat response
message HeartbeatResponse {
  bool ok = 1;
}

// Task definition (serialized plan fragment)
message TaskDefinition {
  string task_id = 1;
  bytes payload = 2;
}

// Task result (serialized Arrow RecordBatch or similar)
// This message might become unused or used by a different RPC later
message TaskResult {
  string task_id = 1;
  bytes result = 2;
}

// New message for task status
message TaskStatus {
  string status = 1; // e.g., "SUBMITTED"
}

// Data fetch request for shuffle
message DataForTaskRequest {
  string task_id = 1;
}

// Data fetch response
message DataForTaskResponse {
  bytes data = 1;
}

message ExecuteQueryRequest {
  string sql = 1;
}

message ExecuteQueryResponse {
  string plan = 1; // Will hold the Debug string of the LogicalPlan
}

service CoordinatorService {
  rpc RegisterWorker(WorkerInfo) returns (RegistrationAck);
  rpc SendHeartbeat(HeartbeatInfo) returns (HeartbeatResponse);
  rpc ExecuteQuery(ExecuteQueryRequest) returns (ExecuteQueryResponse);
}

service WorkerService {
  // Modified ExecuteTask to return TaskStatus
  rpc ExecuteTask(TaskDefinition) returns (TaskStatus);
  rpc GetDataForTask(DataForTaskRequest) returns (DataForTaskResponse);
}
